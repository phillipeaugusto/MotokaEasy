// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotokaEasy.Infrastructure.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotokaEasy.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Configuracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CodigoParametro")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Configuracao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc07a66a-e8ea-410b-950b-9a403a8d0805"),
                            CodigoParametro = 1,
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 797, DateTimeKind.Local).AddTicks(1940),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 797, DateTimeKind.Local).AddTicks(1940),
                            Descricao = "Guid do Plano de 7 dias multa de 20% sobre o valor das diárias não efetivadas",
                            Status = "A",
                            Valor = "01884af8-8e90-4401-906d-293f7c8a3f72"
                        },
                        new
                        {
                            Id = new Guid("277c6b9d-ec48-4e0a-ba43-049f2b9829f5"),
                            CodigoParametro = 2,
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 797, DateTimeKind.Local).AddTicks(6060),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 797, DateTimeKind.Local).AddTicks(6060),
                            Descricao = "Guid do Plano de 15 dias multa de 40% sobre o valor das diárias não efetivadas",
                            Status = "A",
                            Valor = "ecef67ef-8b5b-4dfe-a9d2-5a2989c4503f"
                        });
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Entregador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("ImagemCnh")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NumeroCnh")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<int>("TipoCnh")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Entregador");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Locacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataPrevisaoTerminio")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataTerminio")
                        .HasColumnType("timestamp(0)");

                    b.Property<Guid>("EntregadorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanoId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantidadeDeDiasDoPlano")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Locacao");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.ModeloVeiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.ToTable("ModeloVeiculo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89ce3ddc-8198-4135-8f8c-07eaa9f891dd"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(9410),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(9410),
                            Descricao = "Honda Pop 100",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("84276269-34c9-4ea0-96fc-7e30eb975cb4"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(2210),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(2210),
                            Descricao = "Honda Nxr Bros 160",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("44fe2ff1-118c-48e8-8467-2acbae72b1db"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(4860),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(4860),
                            Descricao = "Honda CRF 250",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("51734813-971a-4729-bae5-f770bf4442c3"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(7500),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 795, DateTimeKind.Local).AddTicks(7500),
                            Descricao = "Yamaha Fazer",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("df1ab9f8-82cf-483c-8488-21fe4ab2c569"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(120),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(120),
                            Descricao = "Yamaha TTR",
                            Status = "A"
                        });
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("QuantidadeDias")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Plano");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01884af8-8e90-4401-906d-293f7c8a3f72"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 791, DateTimeKind.Local).AddTicks(360),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 791, DateTimeKind.Local).AddTicks(330),
                            Descricao = "7 dias",
                            QuantidadeDias = 7,
                            Status = "A",
                            Valor = 30.0
                        },
                        new
                        {
                            Id = new Guid("ecef67ef-8b5b-4dfe-a9d2-5a2989c4503f"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 791, DateTimeKind.Local).AddTicks(8180),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 791, DateTimeKind.Local).AddTicks(8180),
                            Descricao = "15 dias",
                            QuantidadeDias = 15,
                            Status = "A",
                            Valor = 28.0
                        },
                        new
                        {
                            Id = new Guid("5aa095f8-154b-4e1f-b344-a0f89709defa"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 792, DateTimeKind.Local).AddTicks(4800),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 792, DateTimeKind.Local).AddTicks(4800),
                            Descricao = "30 dias",
                            QuantidadeDias = 30,
                            Status = "A",
                            Valor = 22.0
                        },
                        new
                        {
                            Id = new Guid("d8d49646-2a2b-4142-8f4d-cd71f9b61d50"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 793, DateTimeKind.Local).AddTicks(1170),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 793, DateTimeKind.Local).AddTicks(1170),
                            Descricao = "45 dias",
                            QuantidadeDias = 45,
                            Status = "A",
                            Valor = 20.0
                        },
                        new
                        {
                            Id = new Guid("50ba38a0-7de9-4438-894d-74c7cbfed8e4"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 793, DateTimeKind.Local).AddTicks(7540),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 793, DateTimeKind.Local).AddTicks(7530),
                            Descricao = "50 dias",
                            QuantidadeDias = 50,
                            Status = "A",
                            Valor = 18.0
                        });
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.TipoVeiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.ToTable("TipoVeiculo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b7fbf89-4e93-4611-b7da-7d28673709b3"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(3950),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(3940),
                            Descricao = "Moto",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("3a575e43-63d1-4052-b351-2f4b222e0690"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(6710),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 794, DateTimeKind.Local).AddTicks(6710),
                            Descricao = "Carro",
                            Status = "A"
                        });
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33176d9b-eb69-4b43-a497-e2c7ecb4f354"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(2780),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(2780),
                            Email = "useradm@motokaeasy.com",
                            Nome = "UsuárioAdmUser",
                            Numero = "9999999997",
                            Role = "adm,user",
                            Senha = "e0bc60c82713f64ef8a57c0c40d02ce24fd0141d5cc3086259c19b1e62a62bea",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("1f4a4ce9-be3e-455f-b674-b6011d1960c6"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(5860),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(5860),
                            Email = "adm@motokaeasy.com",
                            Nome = "UsuárioADM",
                            Numero = "9999999998",
                            Role = "adm",
                            Senha = "e0bc60c82713f64ef8a57c0c40d02ce24fd0141d5cc3086259c19b1e62a62bea",
                            Status = "A"
                        },
                        new
                        {
                            Id = new Guid("a9e5d5cf-0c51-4534-b792-7284299cd8fc"),
                            DataAlteracao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(8880),
                            DataCriacao = new DateTime(2024, 4, 24, 19, 42, 30, 796, DateTimeKind.Local).AddTicks(8880),
                            Email = "user@motokaeasy.com",
                            Nome = "UsuárioNormal",
                            Numero = "9999999999",
                            Role = "user",
                            Senha = "e0bc60c82713f64ef8a57c0c40d02ce24fd0141d5cc3086259c19b1e62a62bea",
                            Status = "A"
                        });
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp(0)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp(0)");

                    b.Property<Guid>("ModeloVeiculoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<Guid>("TipoVeiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ModeloVeiculoId");

                    b.HasIndex("TipoVeiculoId");

                    b.ToTable("Veiculo");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Locacao", b =>
                {
                    b.HasOne("MotokaEasy.Domain.Entities.Entregador", "Entregador")
                        .WithMany("Locacao")
                        .HasForeignKey("EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotokaEasy.Domain.Entities.Plano", "Plano")
                        .WithMany("Locacao")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotokaEasy.Domain.Entities.Veiculo", "Veiculo")
                        .WithMany("Locacao")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entregador");

                    b.Navigation("Plano");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Veiculo", b =>
                {
                    b.HasOne("MotokaEasy.Domain.Entities.ModeloVeiculo", "ModeloVeiculo")
                        .WithMany("Veiculo")
                        .HasForeignKey("ModeloVeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotokaEasy.Domain.Entities.TipoVeiculo", "TipoVeiculo")
                        .WithMany("Veiculo")
                        .HasForeignKey("TipoVeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModeloVeiculo");

                    b.Navigation("TipoVeiculo");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Entregador", b =>
                {
                    b.Navigation("Locacao");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.ModeloVeiculo", b =>
                {
                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Plano", b =>
                {
                    b.Navigation("Locacao");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.TipoVeiculo", b =>
                {
                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("MotokaEasy.Domain.Entities.Veiculo", b =>
                {
                    b.Navigation("Locacao");
                });
#pragma warning restore 612, 618
        }
    }
}
